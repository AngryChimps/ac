<?php


namespace norm\test;


use PHPUnit_Extensions_Database_DataSet_IDataSet;
use PHPUnit_Extensions_Database_DB_IDatabaseConnection;
use norm\test\config\Config;

require_once __DIR__ . '/../vendor/phpunit/phpunit/src/Framework/Assert/Functions.php';

abstract class AbstractPdoTestCase extends \PHPUnit_Extensions_Database_TestCase {
    const REALM = '_mysql';

     // only instantiate pdo once for test clean-up/fixture load
     private static $pdo = null;

    // only instantiate PHPUnit_Extensions_Database_DB_IDatabaseConnection once per test
    private static $conn = null;

    /*
     * Returns the test database connection.
     *
     * @return PHPUnit_Extensions_Database_DB_IDatabaseConnection
     */
    final public function getConnection()
    {
        if (self::$conn === null) {
            if (self::$pdo == null) {
                $realm = Config::$realms[self::REALM];
                $datastoreConfig = Config::$datastores[$realm['defaultPrimaryDatastore']];
                self::$pdo = new \PDO('mysql:dbname=' . $datastoreConfig['dbname'] . ';host=' . $datastoreConfig['host']
                    . ';port=' . $datastoreConfig['port'], $datastoreConfig['user'], $datastoreConfig['password']);
            }
            self::$conn = $this->createDefaultDBConnection(self::$pdo, $datastoreConfig['dbname']);
        }

        return self::$conn;
    }

    /**
     * Returns the test dataset.
     *
     * @return PHPUnit_Extensions_Database_DataSet_IDataSet
     */
    protected function getDataSet()
    {
        return $this->createMySQLXMLDataSet(__DIR__ . '/test_data.xml');
    }

    protected function setUp() {
        $conn=$this->getConnection();
        $conn->getConnection()->query("set foreign_key_checks=0");
        parent::setUp();
        $conn->getConnection()->query("set foreign_key_checks=1");
    }

    protected function tearDown()
    {
        $conn=$this->getConnection();
        $conn->getConnection()->query("set foreign_key_checks=0");
        parent::tearDown(); // TODO: Change the autogenerated stub
        $conn->getConnection()->query("set foreign_key_checks=1");
    }

} 